/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package program;


import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import entity.*;
import java.awt.Desktop;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.util.Optional;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.Random;
import jdk.internal.org.jline.utils.InputStreamReader;

public class Main extends javax.swing.JFrame {

    private static DAO productDOA, receiptDOA, returnDOA;

    public Main() {
        initComponents();
        refreshProductTable();
        refreshReceiptTable();
        refreshReturnTable();
    }

    public String getRandomElement(List<String> list) {
        Random rand = new Random();
        return list.get(rand.nextInt(list.size()));
    }

    public static boolean stringContainsItemFromList(String inputStr, String[] items) {
        return Arrays.stream(items).anyMatch(inputStr::contains);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jPopupMenu3 = new javax.swing.JPopupMenu();
        jPopupMenu4 = new javax.swing.JPopupMenu();
        jTabbedPaneProduct = new javax.swing.JTabbedPane();
        jPanelCustomer = new javax.swing.JPanel();
        jTextFieldProductID = new javax.swing.JTextField();
        jTextFieldProductType = new javax.swing.JTextField();
        jLabelStationName = new javax.swing.JLabel();
        jLabelKioskID = new javax.swing.JLabel();
        jButtonInsertProduct = new javax.swing.JButton();
        jButtonUpdateProduct = new javax.swing.JButton();
        jButtonDeleteProduct = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProduct = new javax.swing.JTable();
        jLabelStationName1 = new javax.swing.JLabel();
        jTextFieldProductName = new javax.swing.JTextField();
        jLabelStationName2 = new javax.swing.JLabel();
        jTextFieldCondition = new javax.swing.JTextField();
        jLabelStationName3 = new javax.swing.JLabel();
        jTextFieldSerialNumber = new javax.swing.JTextField();
        jLabelStationName4 = new javax.swing.JLabel();
        jTextFieldModelYear = new javax.swing.JTextField();
        jPanelReceipt = new javax.swing.JPanel();
        jScrollPanePassenger = new javax.swing.JScrollPane();
        jTableReceipt = new javax.swing.JTable();
        jTextFieldReceiptID = new javax.swing.JTextField();
        jLabelPassengerID = new javax.swing.JLabel();
        jTextFieldPrice = new javax.swing.JTextField();
        jLabelFirstName = new javax.swing.JLabel();
        jButtonInsertReceipt = new javax.swing.JButton();
        jButtonUpdateReceipt = new javax.swing.JButton();
        jLabelLastName = new javax.swing.JLabel();
        jTextFieldBillingAddress = new javax.swing.JTextField();
        jLabelOrderCustomerID = new javax.swing.JLabel();
        jTextFieldFirstName = new javax.swing.JTextField();
        jButtonDeleteReceipt = new javax.swing.JButton();
        jLabelOrderCustomerID1 = new javax.swing.JLabel();
        jTextFieldLastName = new javax.swing.JTextField();
        jLabelOrderCustomerID2 = new javax.swing.JLabel();
        jTextFieldCardNumber = new javax.swing.JTextField();
        jLabelOrderCustomerID3 = new javax.swing.JLabel();
        jTextFieldReceiptProductID = new javax.swing.JTextField();
        jComboBoxPricrConv = new javax.swing.JComboBox<>();
        jButtonGoogleMaps = new javax.swing.JButton();
        jButtonGenFirstName = new javax.swing.JButton();
        jButtonGenLastName = new javax.swing.JButton();
        jLabelCardType = new javax.swing.JLabel();
        jPanelReturn = new javax.swing.JPanel();
        jScrollPanePassenger1 = new javax.swing.JScrollPane();
        jTableReturn = new javax.swing.JTable();
        jTextFieldReturnID = new javax.swing.JTextField();
        jLabelPassengerID1 = new javax.swing.JLabel();
        jTextFieldReturnReceiptID = new javax.swing.JTextField();
        jLabelFirstName1 = new javax.swing.JLabel();
        jButtonInsertReturn = new javax.swing.JButton();
        jButtonUpdateReturn = new javax.swing.JButton();
        jLabelLastName1 = new javax.swing.JLabel();
        jTextFieldReimbursementType = new javax.swing.JTextField();
        jLabelOrderCustomerID4 = new javax.swing.JLabel();
        jTextFieldReturnReason = new javax.swing.JTextField();
        jButtonDeleteReturn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AirportCrudGUI");
        setResizable(false);

        jTabbedPaneProduct.setName("Customer"); // NOI18N

        jTextFieldProductID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldProductIDKeyPressed(evt);
            }
        });

        jTextFieldProductType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldProductTypeKeyPressed(evt);
            }
        });

        jLabelStationName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelStationName.setText("ProductType");

        jLabelKioskID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelKioskID.setText("ProductID");
        jLabelKioskID.setMaximumSize(new java.awt.Dimension(20, 30));

        jButtonInsertProduct.setText("Insert");
        jButtonInsertProduct.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonInsertProduct.setIconTextGap(0);
        jButtonInsertProduct.setInheritsPopupMenu(true);
        jButtonInsertProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertProductActionPerformed(evt);
            }
        });

        jButtonUpdateProduct.setText("Update");
        jButtonUpdateProduct.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonUpdateProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateProductActionPerformed(evt);
            }
        });

        jButtonDeleteProduct.setText("Delete");
        jButtonDeleteProduct.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDeleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteProductActionPerformed(evt);
            }
        });

        jTableProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ProductID", "ProductType", "ProductName", "SerialNumber", "ModelYear", "Condition"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProductMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableProduct);

        jLabelStationName1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelStationName1.setText("ProductName");

        jTextFieldProductName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldProductNameKeyPressed(evt);
            }
        });

        jLabelStationName2.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelStationName2.setText("SerialNumber");

        jTextFieldCondition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldConditionActionPerformed(evt);
            }
        });
        jTextFieldCondition.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldConditionKeyPressed(evt);
            }
        });

        jLabelStationName3.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelStationName3.setText("ModelYear");

        jTextFieldSerialNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldSerialNumberKeyPressed(evt);
            }
        });

        jLabelStationName4.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelStationName4.setText("Condition");

        jTextFieldModelYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldModelYearActionPerformed(evt);
            }
        });
        jTextFieldModelYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldModelYearKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCustomerLayout = new javax.swing.GroupLayout(jPanelCustomer);
        jPanelCustomer.setLayout(jPanelCustomerLayout);
        jPanelCustomerLayout.setHorizontalGroup(
            jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCustomerLayout.createSequentialGroup()
                .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCustomerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelStationName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelCustomerLayout.createSequentialGroup()
                                .addComponent(jLabelKioskID, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabelStationName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelStationName2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelStationName3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelStationName4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanelCustomerLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jButtonInsertProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonUpdateProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonDeleteProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextFieldProductName)
                        .addComponent(jTextFieldProductType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                        .addComponent(jTextFieldProductID, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextFieldSerialNumber, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextFieldModelYear, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(jTextFieldCondition, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(103, 103, 103)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86))
        );
        jPanelCustomerLayout.setVerticalGroup(
            jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCustomerLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelKioskID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldProductID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelStationName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldProductType, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelStationName1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelStationName2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelStationName3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldModelYear, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelStationName4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldCondition, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInsertProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(83, Short.MAX_VALUE))
            .addGroup(jPanelCustomerLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPaneProduct.addTab("Product", jPanelCustomer);

        jTableReceipt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ReceiptID", "Price", "Billing Address", "First Name", "Last Name", "Card Number", "ProductID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableReceipt.setCellSelectionEnabled(true);
        jTableReceipt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableReceiptMouseClicked(evt);
            }
        });
        jScrollPanePassenger.setViewportView(jTableReceipt);
        if (jTableReceipt.getColumnModel().getColumnCount() > 0) {
            jTableReceipt.getColumnModel().getColumn(2).setResizable(false);
        }

        jTextFieldReceiptID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldReceiptIDKeyPressed(evt);
            }
        });

        jLabelPassengerID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelPassengerID.setText("ReceiptID");

        jTextFieldPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldPriceKeyPressed(evt);
            }
        });

        jLabelFirstName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelFirstName.setText("Price");
        jLabelFirstName.setToolTipText("");

        jButtonInsertReceipt.setText("Insert");
        jButtonInsertReceipt.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonInsertReceipt.setIconTextGap(0);
        jButtonInsertReceipt.setInheritsPopupMenu(true);
        jButtonInsertReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertReceiptActionPerformed(evt);
            }
        });

        jButtonUpdateReceipt.setText("Update");
        jButtonUpdateReceipt.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonUpdateReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateReceiptActionPerformed(evt);
            }
        });

        jLabelLastName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelLastName.setText("Billing Address");
        jLabelLastName.setToolTipText("");

        jTextFieldBillingAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldBillingAddressKeyPressed(evt);
            }
        });

        jLabelOrderCustomerID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelOrderCustomerID.setText("First Name");

        jTextFieldFirstName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldFirstNameKeyPressed(evt);
            }
        });

        jButtonDeleteReceipt.setText("Delete");
        jButtonDeleteReceipt.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDeleteReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteReceiptActionPerformed(evt);
            }
        });

        jLabelOrderCustomerID1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelOrderCustomerID1.setText("Last Name");

        jTextFieldLastName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldLastNameKeyPressed(evt);
            }
        });

        jLabelOrderCustomerID2.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelOrderCustomerID2.setText("Card Number");

        jTextFieldCardNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldCardNumberKeyPressed(evt);
            }
        });

        jLabelOrderCustomerID3.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelOrderCustomerID3.setText("ProductID");

        jTextFieldReceiptProductID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldReceiptProductIDKeyPressed(evt);
            }
        });

        jComboBoxPricrConv.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "USD", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNH", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "SSP", "STD", "STN", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "YER", "ZAR", "ZMW", "ZWL" }));
        jComboBoxPricrConv.setToolTipText("");
        jComboBoxPricrConv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPricrConvActionPerformed(evt);
            }
        });

        jButtonGoogleMaps.setText("Open In Google Maps");
        jButtonGoogleMaps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGoogleMapsActionPerformed(evt);
            }
        });

        jButtonGenFirstName.setText("Generate");
        jButtonGenFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenFirstNameActionPerformed(evt);
            }
        });

        jButtonGenLastName.setText("Generate");
        jButtonGenLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenLastNameActionPerformed(evt);
            }
        });

        jLabelCardType.setText("(Card Type)");

        javax.swing.GroupLayout jPanelReceiptLayout = new javax.swing.GroupLayout(jPanelReceipt);
        jPanelReceipt.setLayout(jPanelReceiptLayout);
        jPanelReceiptLayout.setHorizontalGroup(
            jPanelReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelReceiptLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonInsertReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonUpdateReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonDeleteReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelReceiptLayout.createSequentialGroup()
                .addGroup(jPanelReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelReceiptLayout.createSequentialGroup()
                        .addComponent(jLabelOrderCustomerID3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldReceiptProductID, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelReceiptLayout.createSequentialGroup()
                        .addComponent(jLabelOrderCustomerID2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelCardType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldCardNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelReceiptLayout.createSequentialGroup()
                        .addComponent(jLabelOrderCustomerID1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonGenLastName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelReceiptLayout.createSequentialGroup()
                        .addGroup(jPanelReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelLastName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelReceiptLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButtonGoogleMaps)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldBillingAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelReceiptLayout.createSequentialGroup()
                                .addComponent(jComboBoxPricrConv, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextFieldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelReceiptLayout.createSequentialGroup()
                        .addComponent(jLabelPassengerID, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldReceiptID))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelReceiptLayout.createSequentialGroup()
                        .addComponent(jLabelOrderCustomerID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonGenFirstName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPanePassenger, javax.swing.GroupLayout.PREFERRED_SIZE, 713, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(436, 436, 436))
        );

        jPanelReceiptLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextFieldBillingAddress, jTextFieldPrice});

        jPanelReceiptLayout.setVerticalGroup(
            jPanelReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelReceiptLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanelReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPanePassenger, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelReceiptLayout.createSequentialGroup()
                        .addGroup(jPanelReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldReceiptID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelPassengerID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxPricrConv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldBillingAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonGoogleMaps))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelOrderCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonGenFirstName))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelOrderCustomerID1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonGenLastName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelOrderCustomerID2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldCardNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCardType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelOrderCustomerID3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldReceiptProductID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(jPanelReceiptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInsertReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        jTabbedPaneProduct.addTab("Receipt", jPanelReceipt);

        jTableReturn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ReturnID", "ReceiptID", "ReimbursementType", "ReturnReason"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableReturn.setCellSelectionEnabled(true);
        jTableReturn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableReturnMouseClicked(evt);
            }
        });
        jScrollPanePassenger1.setViewportView(jTableReturn);
        if (jTableReturn.getColumnModel().getColumnCount() > 0) {
            jTableReturn.getColumnModel().getColumn(2).setResizable(false);
        }

        jTextFieldReturnID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldReturnIDKeyPressed(evt);
            }
        });

        jLabelPassengerID1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelPassengerID1.setText("ReturnID");

        jTextFieldReturnReceiptID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldReturnReceiptIDKeyPressed(evt);
            }
        });

        jLabelFirstName1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelFirstName1.setText("ReceiptID");
        jLabelFirstName1.setToolTipText("");

        jButtonInsertReturn.setText("Insert");
        jButtonInsertReturn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonInsertReturn.setIconTextGap(0);
        jButtonInsertReturn.setInheritsPopupMenu(true);
        jButtonInsertReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertReturnActionPerformed(evt);
            }
        });

        jButtonUpdateReturn.setText("Update");
        jButtonUpdateReturn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonUpdateReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateReturnActionPerformed(evt);
            }
        });

        jLabelLastName1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelLastName1.setText("Reimbursement Type");
        jLabelLastName1.setToolTipText("");

        jTextFieldReimbursementType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldReimbursementTypeActionPerformed(evt);
            }
        });
        jTextFieldReimbursementType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldReimbursementTypeKeyPressed(evt);
            }
        });

        jLabelOrderCustomerID4.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelOrderCustomerID4.setText("Return Reason");

        jTextFieldReturnReason.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldReturnReasonKeyPressed(evt);
            }
        });

        jButtonDeleteReturn.setText("Delete");
        jButtonDeleteReturn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDeleteReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteReturnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelReturnLayout = new javax.swing.GroupLayout(jPanelReturn);
        jPanelReturn.setLayout(jPanelReturnLayout);
        jPanelReturnLayout.setHorizontalGroup(
            jPanelReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelReturnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonInsertReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonUpdateReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonDeleteReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelReturnLayout.createSequentialGroup()
                .addGroup(jPanelReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelReturnLayout.createSequentialGroup()
                        .addGroup(jPanelReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelFirstName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelLastName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(238, 238, 238)
                        .addGroup(jPanelReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldReturnReceiptID, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                            .addComponent(jTextFieldReimbursementType)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelReturnLayout.createSequentialGroup()
                        .addComponent(jLabelPassengerID1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldReturnID))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelReturnLayout.createSequentialGroup()
                        .addComponent(jLabelOrderCustomerID4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldReturnReason, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPanePassenger1, javax.swing.GroupLayout.PREFERRED_SIZE, 713, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(436, 436, 436))
        );
        jPanelReturnLayout.setVerticalGroup(
            jPanelReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelReturnLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanelReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPanePassenger1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelReturnLayout.createSequentialGroup()
                        .addGroup(jPanelReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldReturnID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelPassengerID1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldReturnReceiptID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelFirstName1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldReimbursementType, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelLastName1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldReturnReason, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelOrderCustomerID4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 174, Short.MAX_VALUE)
                .addGroup(jPanelReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInsertReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        jTabbedPaneProduct.addTab("Return", jPanelReturn);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(jTabbedPaneProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 1589, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPaneProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPaneProduct.getAccessibleContext().setAccessibleName("Order");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTableReceiptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableReceiptMouseClicked
        int i = jTableReceipt.getSelectedRow();
        TableModel model = jTableReceipt.getModel();
        jTextFieldReceiptID.setText(model.getValueAt(i, 0).toString());
        jTextFieldPrice.setText(model.getValueAt(i, 1).toString());
        jTextFieldBillingAddress.setText(model.getValueAt(i, 2).toString());
        jTextFieldFirstName.setText(model.getValueAt(i, 3).toString());
        jTextFieldLastName.setText(model.getValueAt(i, 4).toString());
        jTextFieldCardNumber.setText(model.getValueAt(i, 5).toString());
        jTextFieldReceiptProductID.setText(model.getValueAt(i, 6).toString());

        jTextFieldBillingAddress.setText(model.getValueAt(i, 2).toString());
    }//GEN-LAST:event_jTableReceiptMouseClicked

    private void jButtonInsertReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertReceiptActionPerformed
        // TODO add your handling code here:
        //System.out.println(dateTimePicker.datePicker.getDateStringOrEmptyString() + " " + dateTimePicker.timePicker.getTimeStringOrEmptyString()+":00.0");
        if (!jTextFieldReceiptID.getText().isEmpty() && !jTextFieldReceiptProductID.getText().isEmpty()) {
            int ID = Integer.parseInt(jTextFieldReceiptID.getText().trim());

            double price = Double.parseDouble(jTextFieldPrice.getText().trim());
            System.out.println("parced price" + price);

            String billingAddress = jTextFieldBillingAddress.getText().trim();
            String firstName = jTextFieldFirstName.getText().trim();
            String lastName = jTextFieldLastName.getText().trim();
            int cardNumber = Integer.parseInt(jTextFieldCardNumber.getText().trim());

            int productID = Integer.parseInt(jTextFieldReceiptProductID.getText().trim());

            System.out.println("parced ID" + ID);
            if(primaryKeyViolationReceipt(ID)){
            
           if(foreignKeyViolationReceipt(productID)){

            addReceipt(ID, price, billingAddress, firstName, lastName, cardNumber, productID);
            refreshReceiptTable();
            clearReceiptTextFields();
           }
            }
        } else {
            alert("ID cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_jButtonInsertReceiptActionPerformed

    private void jButtonUpdateReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateReceiptActionPerformed
        if (!jTextFieldReceiptID.getText().isEmpty() && !jTextFieldReceiptProductID.getText().isEmpty()) {
            int ID = Integer.parseInt(jTextFieldReceiptID.getText().trim());

            double price = Double.parseDouble(jTextFieldPrice.getText().trim());

            String billingAddress = jTextFieldBillingAddress.getText().trim();
            String firstName = jTextFieldFirstName.getText().trim();
            String lastName = jTextFieldLastName.getText().trim();
            int cardNumber = Integer.parseInt(jTextFieldCardNumber.getText().trim());

            int productID = Integer.parseInt(jTextFieldReceiptProductID.getText().trim());

            Receipt receipt = getReceipt(ID);
            if (receipt.getID() != -1) {
                if(foreignKeyViolationReceipt(productID)){
                updateReceipt(ID, price, billingAddress, firstName, lastName, cardNumber, productID);
                refreshReceiptTable();
                clearProductTextFields();
                }
            } else {
                alert("Receipt does not exist", "Update error");
            }
        } else {
            alert("ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_jButtonUpdateReceiptActionPerformed

    private void jButtonDeleteReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteReceiptActionPerformed
        if (!jTextFieldReceiptID.getText().isEmpty()) {
            int ID = Integer.parseInt(jTextFieldReceiptID.getText().trim());

            double price = Double.parseDouble(jTextFieldPrice.getText().trim());

            String billingAddress = jTextFieldBillingAddress.getText().trim();
            String firstName = jTextFieldFirstName.getText().trim();
            String lastName = jTextFieldLastName.getText().trim();
            int cardNumber = Integer.parseInt(jTextFieldCardNumber.getText().trim());

            int productID = Integer.parseInt(jTextFieldReceiptProductID.getText().trim());

            Receipt receipt = getReceipt(ID);
            if (receipt.getID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation",
                        JOptionPane.YES_NO_OPTION);
                if (option == 0) {

                    if (cascadeForeignKeyViolation2(receipt.getID()) != -1) {
                        foreignKeyViolationCascadeMessage2(receipt.getID());
                    } else {
                        deleteReceipt(ID, price, billingAddress, firstName, lastName, cardNumber, productID);
                        refreshReceiptTable();
                        clearReceiptTextFields();
                    }

                }
            } else {
                alert("Receipt does not exist", "Delete error");
            }
        } else {
            alert("ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_jButtonDeleteReceiptActionPerformed

    //handles delete button action
    private void jButtonDeleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteProductActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldProductID.getText().isEmpty()) {
            int ID = Integer.parseInt(jTextFieldProductID.getText().trim());

            String productType = jTextFieldProductType.getText().trim();
            String productName = jTextFieldProductName.getText().trim();
            String serialNumber = jTextFieldSerialNumber.getText().trim();
            int modelYear = Integer.parseInt(jTextFieldModelYear.getText().trim());
            String condition = jTextFieldCondition.getText().trim();

            Product product = getProduct(ID);

            if (product.getID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation",
                        JOptionPane.YES_NO_OPTION);
                if (option == 0) {
                    if (cascadeForeignKeyViolation(product.getID()) != -1) {
                        foreignKeyViolationCascadeMessage(product.getID());
                    } else {
                        deleteProduct(ID, productType, productName, serialNumber, modelYear, condition);
                        refreshProductTable();
                        clearProductTextFields();
                    }
                }
            } else {
                alert("product does not exist", "Delete error");
            }
        } else {
            alert("ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_jButtonDeleteProductActionPerformed

    //handles update button action
    private void jButtonUpdateProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateProductActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldProductID.getText().isEmpty()) {
            int ID = Integer.parseInt(jTextFieldProductID.getText().trim());
            String productType = jTextFieldProductType.getText().trim();
            String productName = jTextFieldProductName.getText().trim();
            String serialNumber = jTextFieldSerialNumber.getText().trim();
            int modelYear = Integer.parseInt(jTextFieldModelYear.getText().trim());
            String condition = jTextFieldCondition.getText().trim();

            Product product = getProduct(ID);
            if (product.getID() != -1) {
                updateProduct(ID, productType, productName, serialNumber, modelYear, condition);
                refreshProductTable();
                clearProductTextFields();
            } else {
                alert("product does not exist", "Update error");
            }
        } else {
            alert("ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_jButtonUpdateProductActionPerformed

    //handle insert button action
    private void jButtonInsertProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertProductActionPerformed
        // TODO add your handling code here:
        System.out.println("Add Product BTN clicked");

        if (!jTextFieldProductID.getText().isEmpty()) {
            int ID = Integer.parseInt(jTextFieldProductID.getText().trim());
            String productType = jTextFieldProductType.getText().trim();
            String productName = jTextFieldProductName.getText().trim();
            String serialNumber = jTextFieldSerialNumber.getText().trim();
            int modelYear = Integer.parseInt(jTextFieldModelYear.getText().trim());
            String condition = jTextFieldCondition.getText().trim();

            if(primaryKeyViolationProduct(ID)){
            addProduct(ID, productType, productName, serialNumber, modelYear, condition);
            refreshProductTable();
            clearProductTextFields();
            }
        } else {
            alert("ID cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_jButtonInsertProductActionPerformed

    private void jTableProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProductMouseClicked
        int i = jTableProduct.getSelectedRow();
        TableModel model = jTableProduct.getModel();
        jTextFieldProductID.setText(model.getValueAt(i, 0).toString());
        jTextFieldProductType.setText(model.getValueAt(i, 1).toString());
        jTextFieldProductName.setText(model.getValueAt(i, 2).toString());
        jTextFieldSerialNumber.setText(model.getValueAt(i, 3).toString());
        jTextFieldModelYear.setText(model.getValueAt(i, 4).toString());
        jTextFieldCondition.setText(model.getValueAt(i, 5).toString());
    }//GEN-LAST:event_jTableProductMouseClicked

    private void jTextFieldConditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldConditionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldConditionActionPerformed

    private void jTableReturnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableReturnMouseClicked
        // TODO add your handling code here:
        int i = jTableReturn.getSelectedRow();
        TableModel model = jTableReturn.getModel();
        jTextFieldReturnID.setText(model.getValueAt(i, 0).toString());
        jTextFieldReturnReceiptID.setText(model.getValueAt(i, 1).toString());
        jTextFieldReimbursementType.setText(model.getValueAt(i, 2).toString());
        jTextFieldReturnReason.setText(model.getValueAt(i, 3).toString());

    }//GEN-LAST:event_jTableReturnMouseClicked

    private void jButtonInsertReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertReturnActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        System.out.println("Add Return BTN clicked");

        if (!jTextFieldReturnID.getText().isEmpty() && !jTextFieldReturnReceiptID.getText().isEmpty()) {
            int ID = Integer.parseInt(jTextFieldReturnID.getText().trim());
            int receiptID = Integer.parseInt(jTextFieldReturnReceiptID.getText().trim());
            String reimbursementType = jTextFieldReimbursementType.getText().trim();
            String returnReason = jTextFieldReturnReason.getText().trim();

            if(primaryKeyViolationReturn(ID)){
            addReturn(ID, receiptID, reimbursementType, returnReason);
            refreshReturnTable();
            clearReturnTextFields();
            }
        } else {
            alert("ID cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_jButtonInsertReturnActionPerformed

    private void jButtonUpdateReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateReturnActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
       if (!jTextFieldReturnID.getText().isEmpty() && !jTextFieldReturnReceiptID.getText().isEmpty()) {
            int ID = Integer.parseInt(jTextFieldReturnID.getText().trim());
            int receiptID = Integer.parseInt(jTextFieldReturnReceiptID.getText().trim());
            String reimbursementType = jTextFieldReimbursementType.getText().trim();
            String returnReason = jTextFieldReturnReason.getText().trim();

            Return returnn = getReturn(ID);
            if (returnn.getID() != -1) {
                updateReturn(ID, receiptID, reimbursementType, returnReason);
                refreshReturnTable();
                clearReturnTextFields();
            } else {
                alert("Check in return does not exist", "Update error");
            }
        } else {
            alert("ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_jButtonUpdateReturnActionPerformed

    private void jButtonDeleteReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteReturnActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldReturnID.getText().isEmpty()) {
            int ID = Integer.parseInt(jTextFieldReturnID.getText().trim());
            int receiptID = Integer.parseInt(jTextFieldReturnReceiptID.getText().trim());
            String reimbursementType = jTextFieldReimbursementType.getText().trim();
            String returnReason = jTextFieldReturnReason.getText().trim();

            Return returnn = getReturn(ID);
            if (returnn.getID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation",
                        JOptionPane.YES_NO_OPTION);
                if (option == 0) {
                    deleteReturn(ID, receiptID, reimbursementType, returnReason);
                    refreshReturnTable();
                    clearReturnTextFields();
                }
            } else {
                alert("Return does not exist", "Delete error");
            }
        } else {
            alert("ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_jButtonDeleteReturnActionPerformed

    private void jTextFieldReimbursementTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldReimbursementTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldReimbursementTypeActionPerformed

    private void jComboBoxPricrConvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPricrConvActionPerformed
        // TODO add your handling code here:
        /*String url_str = "https://api.exchangerate.host/latest";
try{
URL url = new URL(url_str);
HttpURLConnection request = (HttpURLConnection) url.openConnection();
request.connect();

JsonParser jp = new JsonParser();
JsonElement root = jp.parse(new InputStreamReader((InputStream) request.getContent()));
JsonObject jsonobj = root.getAsJsonObject();

String req_result = jsonobj.get("result").toString();
}catch(Exception err){
    
}*/
        int selectedIndex = jComboBoxPricrConv.getSelectedIndex();

        List<Double> convertionFactors = Arrays.asList(
                3.670888,
                86.579136,
                110.724818,
                394.967916,
                1.801106,
                504.315827,
                169.716282,
                1.489753,
                1.798802,
                1.698946,
                1.863666,
                1.99998,
                102.704416,
                1.859874,
                0.377569,
                2064.298024,
                0.999885,
                1.358516,
                6.905573,
                5.202376,
                1.000251,
                0.000059,
                82.371065,
                12.893746,
                2.522877,
                2.014858,
                1.366386,
                2042.438728,
                0.941435,
                0.031714,
                866.434224,
                6.96513,
                6.970683,
                4822.847007,
                601.626007,
                1.000269,
                25.737022,
                105.153157,
                23.109878,
                177.666701,
                7.075039,
                54.821534,
                138.284856,
                24.633549,
                14.99233,
                53.432741,
                0.951404,
                2.207822,
                0.81932,
                0.819276,
                2.683959,
                0.819686,
                13.031558,
                0.81919,
                62.367047,
                8666.181868,
                7.884888,
                209.06493,
                7.786973,
                24.643652,
                7.183184,
                143.395883,
                390.810014,
                15602.646142,
                3.433438,
                0.819433,
                82.209809,
                1458.954315,
                41877.442729,
                142.013172,
                0.819187,
                153.604571,
                0.709155,
                136.593644,
                122.734166,
                84.903967,
                4119.502023,
                468.348453,
                899.516221,
                1318.40225,
                0.30657,
                0.834149,
                473.000266,
                17303.039047,
                1515.110765,
                367.230837,
                153.917893,
                17.286023,
                4.853268,
                10.574652,
                19.378634,
                4375.650764,
                58.594786,
                2098.462581,
                3405.131565,
                8.016919,
                37.87383,
                43.623854,
                15.342517,
                1024.171416,
                19.689712,
                4.388771,
                63.865955,
                17.151634,
                444.570827,
                36.445857,
                10.020121,
                131.793037,
                1.576549,
                0.385954,
                0.999921,
                3.822442,
                3.520862,
                55.296418,
                224.460684,
                4.461954,
                7178.28766,
                3.652551,
                4.681655,
                111.50638,
                62.516969,
                1085.332444,
                3.758808,
                8.199341,
                13.37619,
                568.693909,
                10.382645,
                1.355993,
                0.819491,
                17655.490483,
                568.054984,
                31.765094,
                130.190507,
                22811.702893,
                23.339879,
                8.744588,
                2511.177391,
                17.266639,
                34.889656,
                10.042795,
                3.503507,
                3.200926,
                2.350818,
                18.639171,
                6.783271,
                30.632928,
                2330.745122,
                36.905015,
                3689.241202,
                1.0,
                39.209176,
                11258.871612,
                11.591112,
                23913.454281,
                117.98091,
                2.695878,
                623.937963,
                0.043963,
                0.001244,
                2.701491,
                0.754216,
                623.9379,
                0.001554,
                113.507224,
                0.001788,
                250.065378,
                17.158545,
                17.277568,
                321.826319
        );

        if (!jTextFieldPrice.getText().trim().isEmpty()) {
            double convertionFactor = convertionFactors.get(selectedIndex);

            double price = Double.parseDouble(jTextFieldPrice.getText().trim());
            double convertedPrice = price * convertionFactor;

            if (convertedPrice < 10000000.0) {
                jTextFieldPrice.setText(String.valueOf(convertedPrice));
            } else {
                alert("The price it too high, there is not enough money in the world for this", "Price is too high");
            }

        } else {
            alert("Enter a valid price first", "Enter a Price First");
        }
    }//GEN-LAST:event_jComboBoxPricrConvActionPerformed

    private void jButtonGoogleMapsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGoogleMapsActionPerformed
        // TODO add your handling code here:
        //

        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
            try {
                String billingAddress = jTextFieldBillingAddress.getText().trim();

                if (!billingAddress.isEmpty()) {

                    billingAddress = billingAddress.replaceAll(" ", "+");
                    Desktop.getDesktop().browse(new URI("https://www.google.com/maps/search/" + billingAddress));
                } else {
                    alert("Please type a valid address to open", "No addy entered");
                }
            } catch (Exception err) {
                alert("Error when opening link, please try again later", "Could not open link");
            }
        }
    }//GEN-LAST:event_jButtonGoogleMapsActionPerformed

    private void jButtonGenFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenFirstNameActionPerformed
        // TODO add your handling code here:
        List<String> firstNames = Arrays.asList(
                "Jaafar",
                "Rudra",
                "Adam",
                "Jonathan",
                "Treasure",
                "Anthony",
                "Cassius",
                "Gabriella",
                "Eric",
                "Akhil",
                "Harkaran",
                "Tin",
                "Juan",
                "Sangdon",
                "Karol",
                "Eric",
                "Akshit",
                "Andrew",
                "Robert",
                "Huy",
                "Jomiloju",
                "Joseph",
                "Sabahattin",
                "Grant",
                "Dravya",
                "Kunj",
                "Milankumar",
                "Sahil",
                "Rahul",
                "Marian",
                "Sethu",
                "Ted",
                "David",
                "Zachary",
                "Bingsong",
                "Adam");

        String randomFirstName = getRandomElement(firstNames);

        jTextFieldFirstName.setText(randomFirstName);

    }//GEN-LAST:event_jButtonGenFirstNameActionPerformed

    private void jButtonGenLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenLastNameActionPerformed
        // TODO add your handling code here:

        List<String> lastNames = Arrays.asList(
                "Almalky",
                "Bengali",
                "Christopher",
                "Cunningham",
                "Davis",
                "DiPaolo",
                "French",
                "Gindoff",
                "He",
                "Jobi",
                "Kaur",
                "Khuu",
                "Larenas",
                "Lee",
                "Lewkowicz",
                "Liu",
                "Mahajan",
                "Maiorini",
                "Miller",
                "Nguyen",
                "Odumosu",
                "Olanya",
                "Ozden",
                "Palmieri",
                "Patel",
                "Patel",
                "Patel",
                "Patel",
                "Reji",
                "Rempola",
                "Senthil",
                "Thep",
                "Weisman",
                "Whitaker",
                "Yu",
                "Zorgo");

        String randomLastName = getRandomElement(lastNames);

        jTextFieldLastName.setText(randomLastName);
    }//GEN-LAST:event_jButtonGenLastNameActionPerformed

    private void jTextFieldCardNumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCardNumberKeyPressed
        // TODO add your handling code here:
        
        
         if (((jTextFieldCardNumber.getText().length() < 16) && ((evt.getKeyChar() >= '0') && (evt.getKeyChar() <= '9'))) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE)&& (evt.getKeyChar() != java.awt.event.KeyEvent.VK_SPACE)) {
            jTextFieldCardNumber.setEditable(true);
            
        String cardNumber = jTextFieldCardNumber.getText().trim();

        String[] americanExpress = {"34", "37"};
        String[] discover = {"60", "62", "64", "65"};
        String[] jcb = {"35"};
        String[] dinersClub = {"300", "301", "302", "303", "304", "305", "309", "36", "38", "39"};
        String[] visa = {"4"};
        String[] masterCard = {"2221", "2222", "2223", "2224", "2225", "2226", "2227", "2228", "2229",
            "223", "224", "225", "226", "227", "228", "229",
            "23", "24", "25", "26",
            "270", "271", "2720",
            "50", "51", "52", "53", "54", "55"};

        String cardType = "(Card Type)";

        if (stringContainsItemFromList(cardNumber, americanExpress)) {
            cardType = "Americian Express";
        } else if (stringContainsItemFromList(cardNumber, discover)) {
            cardType = "Discover";
        } else if (stringContainsItemFromList(cardNumber, jcb)) {
            cardType = "JCB";
        } else if (stringContainsItemFromList(cardNumber, dinersClub)) {
            cardType = "Diners Club";
        } else if (stringContainsItemFromList(cardNumber, visa)) {
            cardType = "Visa";
        } else if (stringContainsItemFromList(cardNumber, masterCard)) {
            cardType = "Master Card";
        }

        jLabelCardType.setText(cardType);
        } else {
            jTextFieldCardNumber.setEditable(false);
        }

    }//GEN-LAST:event_jTextFieldCardNumberKeyPressed

    private void jTextFieldProductIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldProductIDKeyPressed
        // TODO add your handling code here:
        if (((jTextFieldProductID.getText().length() < 7) && ((evt.getKeyChar() >= '0') && (evt.getKeyChar() <= '9'))) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE)&& (evt.getKeyChar() != java.awt.event.KeyEvent.VK_SPACE)) {
            jTextFieldProductID.setEditable(true);
        } else {
            jTextFieldProductID.setEditable(false);
        }

    }//GEN-LAST:event_jTextFieldProductIDKeyPressed

    private void jTextFieldSerialNumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSerialNumberKeyPressed
        // TODO add your handling code here:
        if (((jTextFieldSerialNumber.getText().length() < 7) && ((evt.getKeyChar() >= '0') && (evt.getKeyChar() <= '9'))) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE)&& (evt.getKeyChar() != java.awt.event.KeyEvent.VK_SPACE)) {
            jTextFieldSerialNumber.setEditable(true);
        } else {
            jTextFieldSerialNumber.setEditable(false);
        }
    }//GEN-LAST:event_jTextFieldSerialNumberKeyPressed

    private void jTextFieldModelYearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldModelYearKeyPressed
        // TODO add your handling code here:
        if (((jTextFieldModelYear.getText().length() < 4) && ((evt.getKeyChar() >= '0') && (evt.getKeyChar() <= '9'))) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE) && (evt.getKeyChar() != java.awt.event.KeyEvent.VK_SPACE)) {
            jTextFieldModelYear.setEditable(true);
        } else {
            jTextFieldModelYear.setEditable(false);
        }
    }//GEN-LAST:event_jTextFieldModelYearKeyPressed

    private void jTextFieldProductTypeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldProductTypeKeyPressed
        // TODO add your handling code here:
        if ((jTextFieldProductType.getText().length() < 28) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE)) {
            jTextFieldProductType.setEditable(true);
        } else {
            jTextFieldProductType.setEditable(false);
        }
    }//GEN-LAST:event_jTextFieldProductTypeKeyPressed

    private void jTextFieldProductNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldProductNameKeyPressed
        // TODO add your handling code here:
        if ((jTextFieldProductName.getText().length() < 190) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE)) {
            jTextFieldProductName.setEditable(true);
        } else {
            jTextFieldProductName.setEditable(false);
        }
    }//GEN-LAST:event_jTextFieldProductNameKeyPressed

    private void jTextFieldConditionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldConditionKeyPressed
        // TODO add your handling code here:
        if ((jTextFieldCondition.getText().length() < 190) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE)) {
            jTextFieldCondition.setEditable(true);
        } else {
            jTextFieldCondition.setEditable(false);
        }
    }//GEN-LAST:event_jTextFieldConditionKeyPressed

    private void jTextFieldReceiptIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldReceiptIDKeyPressed
        // TODO add your handling code here:
        if (((jTextFieldReceiptID.getText().length() < 7) && ((evt.getKeyChar() >= '0') && (evt.getKeyChar() <= '9'))) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE) && (evt.getKeyChar() != java.awt.event.KeyEvent.VK_SPACE)) {
            jTextFieldReceiptID.setEditable(true);
        } else {
            jTextFieldReceiptID.setEditable(false);
        }
    }//GEN-LAST:event_jTextFieldReceiptIDKeyPressed

    private void jTextFieldPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPriceKeyPressed
        // TODO add your handling code here:
        if (((jTextFieldPrice.getText().length() < 7) && ((evt.getKeyChar() >= '0') && (evt.getKeyChar() <= '9'))) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE)&& (evt.getKeyChar() != java.awt.event.KeyEvent.VK_SPACE)) {
            jTextFieldPrice.setEditable(true);
        } else {
            jTextFieldPrice.setEditable(false);
        }
    }//GEN-LAST:event_jTextFieldPriceKeyPressed

    private void jTextFieldBillingAddressKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBillingAddressKeyPressed
        // TODO add your handling code here:
         if ((jTextFieldBillingAddress.getText().length() < 85) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE)&& (evt.getKeyChar() != java.awt.event.KeyEvent.VK_SPACE)) {
            jTextFieldBillingAddress.setEditable(true);
        } else {
            jTextFieldBillingAddress.setEditable(false);
        }
    }//GEN-LAST:event_jTextFieldBillingAddressKeyPressed

    private void jTextFieldFirstNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldFirstNameKeyPressed
        // TODO add your handling code here:
         if ((jTextFieldFirstName.getText().length() < 45) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE)) {
            jTextFieldFirstName.setEditable(true);
        } else {
            jTextFieldFirstName.setEditable(false);
        }
    }//GEN-LAST:event_jTextFieldFirstNameKeyPressed

    private void jTextFieldLastNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldLastNameKeyPressed
        // TODO add your handling code here:
        if ((jTextFieldLastName.getText().length() < 45) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE)) {
            jTextFieldLastName.setEditable(true);
        } else {
            jTextFieldLastName.setEditable(false);
        }
    }//GEN-LAST:event_jTextFieldLastNameKeyPressed

    private void jTextFieldReceiptProductIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldReceiptProductIDKeyPressed
        // TODO add your handling code here:
          if( ((jTextFieldReceiptProductID.getText().length() < 7) && ((evt.getKeyChar() >= '0') && (evt.getKeyChar() <= '9'))) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE)&& (evt.getKeyChar() != java.awt.event.KeyEvent.VK_SPACE)) {
           jTextFieldReceiptProductID.setEditable(true);   
        }else{
           jTextFieldReceiptProductID.setEditable(false);    
        }
    }//GEN-LAST:event_jTextFieldReceiptProductIDKeyPressed

    private void jTextFieldReturnIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldReturnIDKeyPressed
        // TODO add your handling code here:
          if( ((jTextFieldReturnID.getText().length() < 7) && ((evt.getKeyChar() >= '0') && (evt.getKeyChar() <= '9'))) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE)&& (evt.getKeyChar() != java.awt.event.KeyEvent.VK_SPACE)) {
           jTextFieldReturnID.setEditable(true);   
        }else{
           jTextFieldReturnID.setEditable(false);    
        }
    }//GEN-LAST:event_jTextFieldReturnIDKeyPressed

    private void jTextFieldReturnReceiptIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldReturnReceiptIDKeyPressed
        // TODO add your handling code here:
          if( ((jTextFieldReturnReceiptID.getText().length() < 7) && ((evt.getKeyChar() >= '0') && (evt.getKeyChar() <= '9'))) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE)&& (evt.getKeyChar() != java.awt.event.KeyEvent.VK_SPACE)) {
           jTextFieldReturnReceiptID.setEditable(true);   
        }else{
           jTextFieldReturnReceiptID.setEditable(false);    
        }
    }//GEN-LAST:event_jTextFieldReturnReceiptIDKeyPressed

    private void jTextFieldReimbursementTypeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldReimbursementTypeKeyPressed
        // TODO add your handling code here:
        if( (jTextFieldReimbursementType.getText().length() < 40) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE)) {
           jTextFieldReimbursementType.setEditable(true);   
        }else{
           jTextFieldReimbursementType.setEditable(false);    
        }
    }//GEN-LAST:event_jTextFieldReimbursementTypeKeyPressed

    private void jTextFieldReturnReasonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldReturnReasonKeyPressed
        // TODO add your handling code here:
        if( (jTextFieldReturnReason.getText().length() < 180) || (evt.getKeyChar() == java.awt.event.KeyEvent.VK_BACK_SPACE)) {
           jTextFieldReturnReason.setEditable(true);   
        }else{
           jTextFieldReturnReason.setEditable(false);    
        }
    }//GEN-LAST:event_jTextFieldReturnReasonKeyPressed

    private void jTextFieldModelYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldModelYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldModelYearActionPerformed

    //method to show an info alert
    public void alert(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }

    //method to check for order's customer id foreign key violation

    
   public boolean foreignKeyViolationReceipt(int id) {
        if(getProduct(id).getID() == -1) {
            alert("Product does not exist", "Foreign Key Violation");
            return false;
        }
        return true;
    }

    public void foreignKeyViolationCascadeMessage(int id) {
        alert("Error: This Product has Receipts assioated with it", "Foreign Key Violation");
    }

    public int cascadeForeignKeyViolation(int id) {
        List<Receipt> receipts = receiptDOA.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableReceipt.getModel();
        boolean error = false;
        for (Receipt receipt : receipts) {
            Object[] row = new Object[5];
            if (receipt.getProductID() == id) {
                error = true;
            }
        }
        if (error == true) {
            return 1;
        } else {
            return -1;
        }
    }

    public void foreignKeyViolationCascadeMessage2(int id) {
        alert("Error: This Receipt has Returns assioated with it", "Foreign Key Violation");
    }

    public int cascadeForeignKeyViolation2(int id) {
        //will get recipt id
        List<Return> returns = returnDOA.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableReceipt.getModel();
        boolean error = false;
        for (Return returnn : returns) {
            Object[] row = new Object[5];
            if (returnn.getReceiptID() == id) {
                error = true;
            }
        }
        if (error == true) {
            return 1;
        } else {
            return -1;
        }
    }

    //method to check for customer primary key violation
    public boolean primaryKeyViolationProduct(int id) {
        if (getProduct(id).getID() != -1) {
            alert("Another check in product already exists with same check in product ID, please try another check in product ID", "Primary Key Violation");
            return false;
        }
        return true;
    }

    public boolean primaryKeyViolationReturn(int id) {
        if (getReturn(id).getID() != -1) {
            alert("Another return in return already exists with same check in return ID, please try another return in return ID", "Primary Key Violation");
            return false;
        }
        return true;
    }

    //method to check for order primary key violation
    public boolean primaryKeyViolationReceipt(int id) {
        System.out.println("we got with an rec id of " + getReceipt(id).getID());
        if (getReceipt(id).getID() != -1) {
            System.out.println("made rec obj " + getReceipt(id));
            // System.out.println("we got aa " + getReceipt(id).getID());
            alert("Another receipt already exists with same Receipt ID, please try another Receipt ID", "Primary Key Violation");
            return false;
        }
        return true;
    }

    //method to show an error alert
    public void alert(String msg, String title) {
        JOptionPane.showMessageDialog(rootPane, msg, title, JOptionPane.ERROR_MESSAGE);
    }

    /**
     * CHECKINLOCATION CRUD FUNCTIONS
     */
    static void addProduct(int id, String productType, String productName, String serialNumber, int modelYear, String contidions) {
        System.out.println("Add Product");
        Product product;
        product = new Product(id, productType, productName, serialNumber, modelYear, contidions);
        productDOA.insert(product);
    }

    static void updateProduct(int id, String productType, String productName, String serialNumber, int modelYear, String contidions) {
        Product product;
        product = new Product(id, productType, productName, serialNumber, modelYear, contidions);
        productDOA.update(product);
    }

    static void deleteProduct(int id, String productType, String productName, String serialNumber, int modelYear, String contidions) {
        Product product;
        product = new Product(id, productType, productName, serialNumber, modelYear, contidions);
        productDOA.delete(product);
    }

    static Product getProduct(int id) {
        Optional<Product> product = productDOA.get(id);
        return product.orElseGet(() -> new Product(-1, "Non-exist", "Non-exist", "Non-exist", -1, "Non-exist"));
    }

    /**
     * PASSENGER CRUD FUNCTIONS
     */
    static void addReceipt(int id, double price, String billingAddress, String firstName, String lastName, int cardNumber, int productID) {
        System.out.println("Receipt ID when amke is " + id);
        Receipt receipt;
        receipt = new Receipt(id, price, billingAddress, firstName, lastName, cardNumber, productID);
        System.out.println("Receipt ID when madee is " + receipt);

        receiptDOA.insert(receipt);
    }

    static void updateReceipt(int id, double price, String billingAddress, String firstName, String lastName, int cardNumber, int productID) {
        Receipt receipt;
        receipt = new Receipt(id, price, billingAddress, firstName, lastName, cardNumber, productID);
        System.out.println("Update Receipt when madee is " + receipt);
        receiptDOA.update(receipt);
    }

    static void deleteReceipt(int id, double price, String billingAddress, String firstName, String lastName, int cardNumber, int productID) {
        Receipt receipt;
        receipt = new Receipt(id, price, billingAddress, firstName, lastName, cardNumber, productID);
        receiptDOA.delete(receipt);
    }

    static Receipt getReceipt(int id) {
        Optional<Receipt> receipt = receiptDOA.get(id);
        return receipt.orElseGet(() -> new Receipt(-1, -1.0, "Non-exist", "Non-exist", "Non-exist", -1, -1));
    }

    /**
     * Return CRUD FUNCTIONS
     */
    static void addReturn(int id, int receiptID, String reimbursementType, String returnReason) {
        Return returnn;
        returnn = new Return(id, receiptID, reimbursementType, returnReason);
        returnDOA.insert(returnn);
    }

    static void updateReturn(int id, int receiptID, String reimbursementType, String returnReason) {
        Return returnn;
        returnn = new Return(id, receiptID, reimbursementType, returnReason);
        returnDOA.update(returnn);
    }

    static void deleteReturn(int id, int receiptID, String reimbursementType, String returnReason) {
        Return returnn;
        returnn = new Return(id, receiptID, reimbursementType, returnReason);
        returnDOA.delete(returnn);
    }

    static Return getReturn(int id) {
        Optional<Return> returnn = returnDOA.get(id);
        return returnn.orElseGet(() -> new Return(-1, -1, "Non-exist", "Non-exist"));
    }

    //method to clear the customer txt fields
    private void clearProductTextFields() {
        jTextFieldProductID.setText("");
        jTextFieldProductType.setText("");
        jTextFieldProductName.setText("");
        jTextFieldSerialNumber.setText("");
        jTextFieldModelYear.setText("");
        jTextFieldModelYear.setText("");
        jTextFieldCondition.setText("");
    }

    //method to clear the order txt fields
    private void clearReceiptTextFields() {
        jTextFieldReceiptID.setText("");
        jTextFieldPrice.setText("");
        jTextFieldBillingAddress.setText("");
        jTextFieldFirstName.setText("");
        jTextFieldLastName.setText("");
        jTextFieldCardNumber.setText("");
        jTextFieldReceiptProductID.setText("");
    }

    private void clearReturnTextFields() {
        jTextFieldReturnID.setText("");
        jTextFieldReturnReceiptID.setText("");
        jTextFieldReimbursementType.setText("");
        jTextFieldReturnReason.setText("");
    }

    //fetch customer table
    private void refreshProductTable() {
        List<Product> products = productDOA.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableProduct.getModel();
        //Clear all items in tblContacts
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        for (Product product : products) {
            Object[] row = new Object[6];
            row[0] = product.getID();
            row[1] = product.getProductType();
            row[2] = product.getProductName();
            row[3] = product.getSerialNumber();
            row[4] = product.getModelYear();
            row[5] = product.getConditions();
            model.addRow(row);
        }
    }

    //fetch order table
    private void refreshReceiptTable() {
        List<Receipt> receipts = receiptDOA.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableReceipt.getModel();
        //Clear all items in tblContacts
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        for (Receipt receipt : receipts) {
            Object[] row = new Object[7];
            row[0] = receipt.getID();
            row[1] = receipt.getPrice();
            row[2] = receipt.getBillingAddress();
            row[3] = receipt.getFirstName();
            row[4] = receipt.getLastName();
            row[5] = receipt.getCardNumber();
            row[6] = receipt.getProductID();
            model.addRow(row);
        }
    }

    private void refreshReturnTable() {
        List<Return> returns = returnDOA.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableReturn.getModel();
        //Clear all items in tblContacts
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        for (Return returnn : returns) {
            Object[] row = new Object[4];
            row[0] = returnn.getID();
            row[1] = returnn.getReceiptID();
            row[2] = returnn.getReimbursementType();
            row[3] = returnn.getReturnReason();
            model.addRow(row);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        productDOA = new ProductDOA();
        receiptDOA = new ReceiptDAO();
        returnDOA = new ReturnDOA();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDeleteProduct;
    private javax.swing.JButton jButtonDeleteReceipt;
    private javax.swing.JButton jButtonDeleteReturn;
    private javax.swing.JButton jButtonGenFirstName;
    private javax.swing.JButton jButtonGenLastName;
    private javax.swing.JButton jButtonGoogleMaps;
    private javax.swing.JButton jButtonInsertProduct;
    private javax.swing.JButton jButtonInsertReceipt;
    private javax.swing.JButton jButtonInsertReturn;
    private javax.swing.JButton jButtonUpdateProduct;
    private javax.swing.JButton jButtonUpdateReceipt;
    private javax.swing.JButton jButtonUpdateReturn;
    private javax.swing.JComboBox<String> jComboBoxPricrConv;
    private javax.swing.JLabel jLabelCardType;
    private javax.swing.JLabel jLabelFirstName;
    private javax.swing.JLabel jLabelFirstName1;
    private javax.swing.JLabel jLabelKioskID;
    private javax.swing.JLabel jLabelLastName;
    private javax.swing.JLabel jLabelLastName1;
    private javax.swing.JLabel jLabelOrderCustomerID;
    private javax.swing.JLabel jLabelOrderCustomerID1;
    private javax.swing.JLabel jLabelOrderCustomerID2;
    private javax.swing.JLabel jLabelOrderCustomerID3;
    private javax.swing.JLabel jLabelOrderCustomerID4;
    private javax.swing.JLabel jLabelPassengerID;
    private javax.swing.JLabel jLabelPassengerID1;
    private javax.swing.JLabel jLabelStationName;
    private javax.swing.JLabel jLabelStationName1;
    private javax.swing.JLabel jLabelStationName2;
    private javax.swing.JLabel jLabelStationName3;
    private javax.swing.JLabel jLabelStationName4;
    private javax.swing.JPanel jPanelCustomer;
    private javax.swing.JPanel jPanelReceipt;
    private javax.swing.JPanel jPanelReturn;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JPopupMenu jPopupMenu3;
    private javax.swing.JPopupMenu jPopupMenu4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPanePassenger;
    private javax.swing.JScrollPane jScrollPanePassenger1;
    private javax.swing.JTabbedPane jTabbedPaneProduct;
    private javax.swing.JTable jTableProduct;
    private javax.swing.JTable jTableReceipt;
    private javax.swing.JTable jTableReturn;
    private javax.swing.JTextField jTextFieldBillingAddress;
    private javax.swing.JTextField jTextFieldCardNumber;
    private javax.swing.JTextField jTextFieldCondition;
    private javax.swing.JTextField jTextFieldFirstName;
    private javax.swing.JTextField jTextFieldLastName;
    private javax.swing.JTextField jTextFieldModelYear;
    private javax.swing.JTextField jTextFieldPrice;
    private javax.swing.JTextField jTextFieldProductID;
    private javax.swing.JTextField jTextFieldProductName;
    private javax.swing.JTextField jTextFieldProductType;
    private javax.swing.JTextField jTextFieldReceiptID;
    private javax.swing.JTextField jTextFieldReceiptProductID;
    private javax.swing.JTextField jTextFieldReimbursementType;
    private javax.swing.JTextField jTextFieldReturnID;
    private javax.swing.JTextField jTextFieldReturnReason;
    private javax.swing.JTextField jTextFieldReturnReceiptID;
    private javax.swing.JTextField jTextFieldSerialNumber;
    // End of variables declaration//GEN-END:variables
}
